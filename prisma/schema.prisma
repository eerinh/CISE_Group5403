generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Article {
    id                  String   @id @default(cuid()) @map("_id")
    title               String
    author              String
    date                DateTime
    journal_name        String
    se_practice         String
    claim               String
    result_of_evidence  String
    type_of_research    String
    type_of_participant String
    approved            Boolean
    checked             Boolean  @default(false)
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
    ratings             Rating[]
}

model Rating {
    identifier String  @map("_id") @id @default(cuid()) 
    ratingAmount Int 
    article      Article @relation(fields: [articleId], references: [id])
    articleId    String
    userId       String

    @@unique([userId, articleId])
}

model Account {
    id                String  @id @default(cuid()) @map("_id")
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid()) @map("_id")
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String @map("_id") @id @default(cuid()) 
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
